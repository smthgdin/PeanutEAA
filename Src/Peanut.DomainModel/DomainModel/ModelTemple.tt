<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>

<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>

<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#@ include file="../CodeGeneration/DBSchemaFactory.ttinclude"#>
<#@ include file="../CodeGeneration/MultiDocument.ttinclude"#>


<# var manager = new Manager(Host, GenerationEnvironment, true) { OutputPath = Path.GetDirectoryName(Host.TemplateFile)}; #>
<#
    var dbSchema=DBSchemaFactory.GetDBSchema();
	List<string> tableList=dbSchema.GetTables();
	foreach(string tableName in tableList)
	{
		manager.StartBlock(tableName+".cs");
		Table table=dbSchema.GetTableMetadata(tableName);
#>

using System;
using System.Collections.Generic;
using System.Text;

namespace TTTest.MutilationModel
{
	public partial class <#= tableName #>
	{
		public <#=tableName#>() { }

		<#
		foreach(Column c in table.Columns)
		{
		#>

			public <#= GeneratorHelper.GetQuesMarkByType(c.TypeName)#> <#= c.UpColumnName#> { get; set; }
		<#
		}
		#>
	}
}

<#
		manager.EndBlock();
	}

	manager.Process(true);
#>